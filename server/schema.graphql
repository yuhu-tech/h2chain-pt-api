type Query {
  me: User!
  getphonenumber(encryptedData:String!,iv:String!,jscode:String!):String
  search(orderid: String,state:Int,datetime:Int,isregistered:Int):[Order]
  mywallet(skip:Int!,time:Int): Walletmsg
  searchhash(txhash:String!):BcPayload
}

type BcPayload{
  chainname:String
  hotelcer: String
  hoteladdr: String
  hotelhrname: String
  hotelname: String
  advisercer: String
  adviseraddr: String
  advisername: String
  adviserhrname: String
  ptcer: String
  ptaddr: String
  ptname: String
  contractaddress: String
  blocknumber: Int
  hash:String
  occupation: String
  datetime: Int
  isrefused: Int
  # to be continued
}

type Walletmsg{
  ptaddr:String
  balance:Int
  transactions:[Tx]
}

type Tx{
  timestamp:Int
  reason:String!
  income:Int
  value:String!
}

type Adviser{
  name:String!
  phone:String!
  companyname:String!
}

type Order {
  hash : String
  adviser: Adviser!
  hotel:Hotel!
  state : Int
  originorder:Originorder!
  modifiedorder:[Modifiedorder]
  maleyet:Int
  femaleyet:Int
  countyet:Int
  postorder:Postorder
  ptorderstate: Int
  #1 == registered and 2 == refused and 3 == re-registered and 4 == to-registered and 5 == give up
}

type Hotel{
  hotelid : String!
  hotelname: String!
  hotelphone:String!
  hotelintroduction:String!
  hoteladdress:String!
  cover:[String]
}

type Postorder{
  orderid:String
  salary:Int
  workcontent:String
  attention:String
}


type Originorder{
  orderid : String!
  occupation: String!
  datetime: Int!
  duration: Int!
  mode: Int!
  count: Int!
  male: Int!
  female: Int!
  hotelid: Int!
  adviserid: Int!
}


type Modifiedorder{
  orderid: String
  changeddatetime: Int
  changedduration: Int
  changedmode: Int
  changedcount: Int
  changedmale: Int
  changedfemale: Int
}



type Mutation {
#signup(email: String!, password: String!, name: String!): AuthPayload!
  login(jscode:String!): AuthPayload!
  registerorder(registerorder:InputRegisterorder!,formid:String!):OrderPayload!
  createpersonalmsg(personalmsg:InputPersonalmsg!):UserPayload
  modifypersonalmsg(personalmsg:InputPersonalmsg!):Boolean!
  updatewechat:Boolean!
  modifyptoforder(orderid:String!,ptstatus:Int!,formid:String!):Boolean!
}



type UserPayload{
  user:User!
  error:Boolean!
}


input InputRegisterorder{
  orderid:String!
  register:Int!
  inviterid:String
  type:Int!
  #register == 1 means attend, register == 2 means cancel 3 == re-registered 4 == not go by himself
}


input InputPersonalmsg{
  name:String!
  phonenumber:String!
  idnumber:String!
  gender:Int!
  #1 represents male and 2 represents female
  height:Int!
  weight:Int!
  status:Int!
  #1 represents students while 2 represents !students
}

type Personalmsg{
  name:String!
  phonenumber:String!
  idnumber:String!
  gender:Int!
  #1 represents male and 2 represents female
  height:Int!
  weight:Int!
  status:Int!
  #1 represents students while 2 represents !students
  user:User!
}

type OrderPayload {
  orderid: String
  error: Boolean
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id : ID!
  wechat: String
  personalmsg:Personalmsg
}


